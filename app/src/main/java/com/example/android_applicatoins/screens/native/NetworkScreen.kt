package com.example.android_applicatoins.screens.native

import android.content.Context
import android.net.ConnectivityManager
import android.net.Network
import android.net.NetworkCapabilities
import android.net.NetworkRequest
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.expandVertically
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.w3c.dom.Document
import org.w3c.dom.Element
import java.io.StringReader
import java.net.HttpURLConnection
import java.net.URL
import java.text.SimpleDateFormat
import java.util.*
import javax.xml.parsers.DocumentBuilderFactory

data class NetworkInfo(
    val isConnected: Boolean,
    val networkType: String,
    val networkState: String,
    val timestamp: String
)

data class DownloadResult(
    val success: Boolean,
    val message: String,
    val data: String = ""
)

data class XmlParseResult(
    val success: Boolean,
    val message: String,
    val parsedData: String = ""
)

// XML Î¨∏ÏÑú ÌååÏã± Ìï®Ïàò
fun parseXmlDocument(document: Document): String {
    val root = document.documentElement
    val rootName = root.tagName
    var result = "Î£®Ìä∏ ÏöîÏÜå: $rootName\n\n"
    
    val children = root.childNodes
    for (i in 0 until children.length) {
        val child = children.item(i)
        if (child.nodeType == org.w3c.dom.Node.ELEMENT_NODE) {
            val element = child as Element
            val tagName = element.tagName
            val textContent = element.textContent
            result += "$tagName: $textContent\n"
        }
    }
    
    return result
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NetworkScreen(
    onBackPressed: () -> Unit
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    
    var networkInfo by remember { mutableStateOf(NetworkInfo(false, "Ïó∞Í≤∞ ÏóÜÏùå", "DISCONNECTED", "")) }
    var networkHistory by remember { mutableStateOf(listOf<NetworkInfo>()) }
    var downloadResult by remember { mutableStateOf<DownloadResult?>(null) }
    var xmlParseResult by remember { mutableStateOf<XmlParseResult?>(null) }
    var testUrl by remember { mutableStateOf("https://httpbin.org/xml") }
    var xmlTestData by remember { mutableStateOf("") }
    
    // ÌÜ†Í∏Ä ÏÉÅÌÉúÎì§
    var showNetworkInfo by remember { mutableStateOf(false) }
    var showWebAppInfo by remember { mutableStateOf(false) }
    var showXmlInfo by remember { mutableStateOf(false) }
    var showDownloadTest by remember { mutableStateOf(false) }
    var showXmlTest by remember { mutableStateOf(false) }
    
    val connectivityManager = remember {
        context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
    }
    
    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
    fun updateNetworkStatus() {
        val activeNetwork = connectivityManager.activeNetwork
        val networkCapabilities = connectivityManager.getNetworkCapabilities(activeNetwork)
        
        val isConnected = networkCapabilities != null
        val networkType = when {
            networkCapabilities?.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) == true -> "Wi-Fi"
            networkCapabilities?.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) == true -> "Î™®Î∞îÏùº Îç∞Ïù¥ÌÑ∞"
            networkCapabilities?.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) == true -> "Ïù¥ÎçîÎÑ∑"
            networkCapabilities?.hasTransport(NetworkCapabilities.TRANSPORT_BLUETOOTH) == true -> "Î∏îÎ£®Ìà¨Ïä§"
            else -> "Ïó∞Í≤∞ ÏóÜÏùå"
        }
        
        val networkState = if (isConnected) "CONNECTED" else "DISCONNECTED"
        val timestamp = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
        
        val newNetworkInfo = NetworkInfo(isConnected, networkType, networkState, timestamp)
        networkInfo = newNetworkInfo
        
        // ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï∂îÍ∞Ä (ÏµúÎåÄ 10Í∞ú)
        networkHistory = (listOf(newNetworkInfo) + networkHistory).take(10)
    }
    
    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏΩúÎ∞±
    val networkCallback = remember {
        object : ConnectivityManager.NetworkCallback() {
            override fun onAvailable(network: Network) {
                updateNetworkStatus()
            }
            
            override fun onLost(network: Network) {
                updateNetworkStatus()
            }
        }
    }
    
    // ÎÑ§Ìä∏ÏõåÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
    LaunchedEffect(Unit) {
        val networkRequest = NetworkRequest.Builder().build()
        connectivityManager.registerNetworkCallback(networkRequest, networkCallback)
        updateNetworkStatus()
    }
    
    // ÌååÏùº Îã§Ïö¥Î°úÎìú ÌÖåÏä§Ìä∏
    fun testFileDownload() {
        scope.launch {
            downloadResult = try {
                val result = withContext(Dispatchers.IO) {
                    val url = URL(testUrl)
                    val connection = url.openConnection() as HttpURLConnection
                    connection.requestMethod = "GET"
                    connection.connectTimeout = 10000
                    connection.readTimeout = 10000
                    
                    val responseCode = connection.responseCode
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        val inputStream = connection.inputStream
                        val content = inputStream.bufferedReader().use { it.readText() }
                        inputStream.close()
                        connection.disconnect()
                        
                        DownloadResult(true, "Îã§Ïö¥Î°úÎìú ÏÑ±Í≥µ! ÏùëÎãµ ÏΩîÎìú: $responseCode", content)
                    } else {
                        connection.disconnect()
                        DownloadResult(false, "Îã§Ïö¥Î°úÎìú Ïã§Ìå®. ÏùëÎãµ ÏΩîÎìú: $responseCode")
                    }
                }
                result
            } catch (e: Exception) {
                DownloadResult(false, "Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•ò Î∞úÏÉù: ${e.message}")
            }
        }
    }
    
    // XML ÌååÏã± ÌÖåÏä§Ìä∏
    fun testXmlParsing() {
        if (xmlTestData.isBlank()) {
            xmlParseResult = XmlParseResult(false, "XML Îç∞Ïù¥ÌÑ∞Î•º Î®ºÏ†Ä ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
            return
        }
        
        scope.launch {
            xmlParseResult = try {
                val result = withContext(Dispatchers.IO) {
                    val factory = DocumentBuilderFactory.newInstance()
                    val builder = factory.newDocumentBuilder()
                    val inputSource = org.xml.sax.InputSource(StringReader(xmlTestData))
                    val document = builder.parse(inputSource)
                    
                    val parsedData = parseXmlDocument(document)
                    XmlParseResult(true, "XML ÌååÏã± ÏÑ±Í≥µ!", parsedData)
                }
                result
            } catch (e: Exception) {
                XmlParseResult(false, "XML ÌååÏã± Ï§ë Ïò§Î•ò Î∞úÏÉù: ${e.message}")
            }
        }
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("ÎÑ§Ìä∏ÏõåÌÅ¨ & Ïõπ ÌÖåÏä§Ìä∏") },
                navigationIcon = {
                    IconButton(onClick = onBackPressed) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞")
                    }
                }
            )
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // ÎÑ§Ìä∏ÏõåÌÇπ ÏÉÅÌÉú Ï°∞Ìöå ÏÑπÏÖò
            item {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "üåê ÎÑ§Ìä∏ÏõåÌÇπ ÏÉÅÌÉú Ï°∞Ìöå",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold
                            )
                            IconButton(onClick = { showNetworkInfo = !showNetworkInfo }) {
                                Icon(
                                    if (showNetworkInfo) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                                    contentDescription = "ÌéºÏπòÍ∏∞/Ï†ëÍ∏∞"
                                )
                            }
                        }
                        
                        AnimatedVisibility(
                            visible = showNetworkInfo,
                            enter = expandVertically(),
                            exit = shrinkVertically()
                        ) {
                            Column(
                                modifier = Modifier.padding(top = 16.dp),
                                verticalArrangement = Arrangement.spacedBy(8.dp)
                            ) {
                                Text(
                                    text = "‚Ä¢ getActiveNetworkInfo(): ÌòÑÏû¨ ÌôúÏÑ±ÌôîÎêú ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥ Î∞òÌôò\n" +
                                            "‚Ä¢ NetworkInfo Í∞ùÏ≤¥: ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉúÎ•º ÌëúÌòÑÌïòÎäî Í∞ùÏ≤¥\n" +
                                            "‚Ä¢ Ï£ºÏöî Î©îÏÑúÎìú: isConnected(), getType(), getState()",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                
                                Divider(modifier = Modifier.padding(vertical = 8.dp))
                                
                                // ÌòÑÏû¨ ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween
                                ) {
                                    Text("Ïó∞Í≤∞ ÏÉÅÌÉú:")
                                    Row(verticalAlignment = Alignment.CenterVertically) {
                                        Box(
                                            modifier = Modifier
                                                .size(12.dp)
                                                .clip(CircleShape)
                                                .background(
                                                    if (networkInfo.isConnected) Color.Green else Color.Red
                                                )
                                        )
                                        Spacer(modifier = Modifier.width(8.dp))
                                        Text(
                                            text = if (networkInfo.isConnected) "Ïó∞Í≤∞Îê®" else "Ïó∞Í≤∞ ÏïàÎê®",
                                            color = if (networkInfo.isConnected) Color.Green else Color.Red,
                                            fontWeight = FontWeight.Bold
                                        )
                                    }
                                }
                                
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween
                                ) {
                                    Text("ÎÑ§Ìä∏ÏõåÌÅ¨ ÌÉÄÏûÖ:")
                                    Text(networkInfo.networkType, fontWeight = FontWeight.Medium)
                                }
                                
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween
                                ) {
                                    Text("ÏÉÅÌÉú:")
                                    Text(networkInfo.networkState, fontWeight = FontWeight.Medium)
                                }
                                
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween
                                ) {
                                    Text("ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏:")
                                    Text(networkInfo.timestamp, fontWeight = FontWeight.Medium)
                                }
                                
                                // ÎÑ§Ìä∏ÏõåÌÅ¨ ÌûàÏä§ÌÜ†Î¶¨
                                if (networkHistory.isNotEmpty()) {
                                    Text(
                                        text = "ÎÑ§Ìä∏ÏõåÌÅ¨ Î≥ÄÍ≤Ω ÌûàÏä§ÌÜ†Î¶¨:",
                                        style = MaterialTheme.typography.titleSmall,
                                        modifier = Modifier.padding(top = 16.dp)
                                    )
                                    
                                    networkHistory.take(5).forEach { info ->
                                        Row(
                                            modifier = Modifier.fillMaxWidth(),
                                            horizontalArrangement = Arrangement.SpaceBetween
                                        ) {
                                            Text(
                                                text = info.timestamp,
                                                style = MaterialTheme.typography.bodySmall
                                            )
                                            Text(
                                                text = "${info.networkType} - ${info.networkState}",
                                                style = MaterialTheme.typography.bodySmall,
                                                color = if (info.isConnected) Color.Green else Color.Red
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            // ÏõπÏï± Í∞úÎÖê ÏÑ§Î™Ö ÏÑπÏÖò
            item {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "üì± ÏõπÏï± Í∞úÎÖê",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold
                            )
                            IconButton(onClick = { showWebAppInfo = !showWebAppInfo }) {
                                Icon(
                                    if (showWebAppInfo) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                                    contentDescription = "ÌéºÏπòÍ∏∞/Ï†ëÍ∏∞"
                                )
                            }
                        }
                        
                        AnimatedVisibility(
                            visible = showWebAppInfo,
                            enter = expandVertically(),
                            exit = shrinkVertically()
                        ) {
                            Column(
                                modifier = Modifier.padding(top = 16.dp),
                                verticalArrangement = Arrangement.spacedBy(12.dp)
                            ) {
                                // ÎÑ§Ïù¥Ìã∞Î∏å Ïï±
                                Card(
                                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)
                                ) {
                                    Column(
                                        modifier = Modifier.padding(12.dp)
                                    ) {
                                        Text(
                                            text = "üèóÔ∏è ÎÑ§Ïù¥Ìã∞Î∏å Ïï± (Native App)",
                                            style = MaterialTheme.typography.titleSmall,
                                            fontWeight = FontWeight.Bold
                                        )
                                        Text(
                                            text = "‚Ä¢ ÌîåÎû´Ìèº Ïñ∏Ïñ¥Î°ú ÏßÅÏ†ë Í∞úÎ∞ú (Java/Kotlin, Swift/Objective-C)\n" +
                                                    "‚Ä¢ Ïû•Ï†ê: ÏÑ±Îä• ÏµúÍ≥†, ÎîîÎ∞îÏù¥Ïä§ API Ï†ëÍ∑º Í∞ÄÎä•\n" +
                                                    "‚Ä¢ Îã®Ï†ê: ÌîåÎû´ÌèºÎßàÎã§ Îî∞Î°ú Í∞úÎ∞ú ÌïÑÏöî",
                                            style = MaterialTheme.typography.bodySmall,
                                            modifier = Modifier.padding(top = 4.dp)
                                        )
                                    }
                                }
                                
                                // ÏõπÏï±
                                Card(
                                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.secondaryContainer)
                                ) {
                                    Column(
                                        modifier = Modifier.padding(12.dp)
                                    ) {
                                        Text(
                                            text = "üåê ÏõπÏï± (Web App)",
                                            style = MaterialTheme.typography.titleSmall,
                                            fontWeight = FontWeight.Bold
                                        )
                                        Text(
                                            text = "‚Ä¢ Ïõπ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïã§Ìñâ (HTML, CSS, JS Í∏∞Î∞ò)\n" +
                                                    "‚Ä¢ Ïû•Ï†ê: Î∞∞Ìè¨ Ïâ¨ÏõÄ, ÌÅ¨Î°úÏä§ÌîåÎû´Ìèº ÏßÄÏõê\n" +
                                                    "‚Ä¢ Îã®Ï†ê: ÎîîÎ∞îÏù¥Ïä§ Í∏∞Îä• Ï†ëÍ∑º Ï†úÌïú, ÏÑ±Îä• Ï†úÏïΩ",
                                            style = MaterialTheme.typography.bodySmall,
                                            modifier = Modifier.padding(top = 4.dp)
                                        )
                                    }
                                }
                                
                                // ÌïòÏù¥Î∏åÎ¶¨Îìú Ïï±
                                Card(
                                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.tertiaryContainer)
                                ) {
                                    Column(
                                        modifier = Modifier.padding(12.dp)
                                    ) {
                                        Text(
                                            text = "üîó ÌïòÏù¥Î∏åÎ¶¨Îìú Ïï± (Hybrid App)",
                                            style = MaterialTheme.typography.titleSmall,
                                            fontWeight = FontWeight.Bold
                                        )
                                        Text(
                                            text = "‚Ä¢ Ïõπ Í∏∞Ïà† + ÎÑ§Ïù¥Ìã∞Î∏å Ïª®ÌÖåÏù¥ÎÑà (WebView)\n" +
                                                    "‚Ä¢ Ïû•Ï†ê: ÌÅ¨Î°úÏä§ÌîåÎû´Ìèº + ÏùºÎ∂Ä ÎÑ§Ïù¥Ìã∞Î∏å API Ï†ëÍ∑º\n" +
                                                    "‚Ä¢ Îã®Ï†ê: ÎÑ§Ïù¥Ìã∞Î∏å Ïï±Î≥¥Îã§ ÏÑ±Îä• Îñ®Ïñ¥Ïßê",
                                            style = MaterialTheme.typography.bodySmall,
                                            modifier = Modifier.padding(top = 4.dp)
                                        )
                                    }
                                }
                                
                                // WebView ÏúÑÏ†Ø
                                Card(
                                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
                                ) {
                                    Column(
                                        modifier = Modifier.padding(12.dp)
                                    ) {
                                        Text(
                                            text = "üì± WebView ÏúÑÏ†Ø",
                                            style = MaterialTheme.typography.titleSmall,
                                            fontWeight = FontWeight.Bold
                                        )
                                        Text(
                                            text = "‚Ä¢ Ïï± ÎÇ¥ÏóêÏÑú Ïõπ ÌéòÏù¥ÏßÄÎ•º Î≥¥Ïó¨Ï£ºÎäî Î∑∞\n" +
                                                    "‚Ä¢ ÏÇ¨Ïö© Î∂ÑÏïº: Îâ¥Ïä§/Í≤åÏãúÌåê, ÌïòÏù¥Î∏åÎ¶¨Îìú Ïï±\n" +
                                                    "‚Ä¢ ÌïúÍ≥Ñ: ÎÑ§Ïù¥Ìã∞Î∏å Í∏∞Îä• Ï†ëÍ∑º Ï†úÏïΩ, ÏÑ±Îä• Î¨∏Ï†ú",
                                            style = MaterialTheme.typography.bodySmall,
                                            modifier = Modifier.padding(top = 4.dp)
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            // XML Ï≤òÎ¶¨ ÏÑπÏÖò
            item {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "üìÑ XML Ï≤òÎ¶¨",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold
                            )
                            IconButton(onClick = { showXmlInfo = !showXmlInfo }) {
                                Icon(
                                    if (showXmlInfo) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                                    contentDescription = "ÌéºÏπòÍ∏∞/Ï†ëÍ∏∞"
                                )
                            }
                        }
                        
                        AnimatedVisibility(
                            visible = showXmlInfo,
                            enter = expandVertically(),
                            exit = shrinkVertically()
                        ) {
                            Column(
                                modifier = Modifier.padding(top = 16.dp),
                                verticalArrangement = Arrangement.spacedBy(8.dp)
                            ) {
                                Text(
                                    text = "‚Ä¢ XML: Îç∞Ïù¥ÌÑ∞ ÍµêÌôòÏö© ÎßàÌÅ¨ÏóÖ Ïñ∏Ïñ¥\n" +
                                            "‚Ä¢ DOM(Document Object Model): XMLÏùÑ Ìä∏Î¶¨ Íµ¨Ï°∞Î°ú Î©îÎ™®Î¶¨Ïóê Î°úÎìú\n" +
                                            "‚Ä¢ Í∞Å ÌÉúÍ∑∏Î•º ÎÖ∏Îìú(Node)Î°ú Ï†ëÍ∑º Í∞ÄÎä•",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                
                                Divider(modifier = Modifier.padding(vertical = 8.dp))
                                
                                Text(
                                    text = "ÏòàÏãú XML Îç∞Ïù¥ÌÑ∞:",
                                    style = MaterialTheme.typography.titleSmall,
                                    fontWeight = FontWeight.Bold
                                )
                                
                                Card(
                                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
                                ) {
                                    Text(
                                        text = "<users>\n" +
                                                "  <user id=\"1\">\n" +
                                                "    <name>ÌôçÍ∏∏Îèô</name>\n" +
                                                "    <email>hong@test.com</email>\n" +
                                                "  </user>\n" +
                                                "</users>",
                                        style = MaterialTheme.typography.bodySmall,
                                        fontFamily = androidx.compose.ui.text.font.FontFamily.Monospace,
                                        modifier = Modifier.padding(12.dp)
                                    )
                                }
                            }
                        }
                    }
                }
            }
            
            // ÌååÏùº Îã§Ïö¥Î°úÎìú ÌÖåÏä§Ìä∏ ÏÑπÏÖò
            item {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "‚¨áÔ∏è ÌååÏùº Îã§Ïö¥Î°úÎìú ÌÖåÏä§Ìä∏",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold
                            )
                            IconButton(onClick = { showDownloadTest = !showDownloadTest }) {
                                Icon(
                                    if (showDownloadTest) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                                    contentDescription = "ÌéºÏπòÍ∏∞/Ï†ëÍ∏∞"
                                )
                            }
                        }
                        
                        AnimatedVisibility(
                            visible = showDownloadTest,
                            enter = expandVertically(),
                            exit = shrinkVertically()
                        ) {
                            Column(
                                modifier = Modifier.padding(top = 16.dp),
                                verticalArrangement = Arrangement.spacedBy(12.dp)
                            ) {
                                Text(
                                    text = "‚Ä¢ HttpURLConnection: Í∏∞Î≥∏ HTTP ÌÜµÏã† ÌÅ¥ÎûòÏä§\n" +
                                            "‚Ä¢ NetworkOnMainThreadException: Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú ÎÑ§Ìä∏ÏõåÌÅ¨ ÏûëÏóÖ Ïãú Î∞úÏÉù\n" +
                                            "‚Ä¢ Ìï¥Í≤∞: AsyncTask, Thread, Coroutine Îì± Î≥ÑÎèÑ Ïä§Î†àÎìúÏóêÏÑú Ïã§Ìñâ",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                
                                OutlinedTextField(
                                    value = testUrl,
                                    onValueChange = { testUrl = it },
                                    label = { Text("ÌÖåÏä§Ìä∏ URL") },
                                    modifier = Modifier.fillMaxWidth()
                                )
                                
                                Button(
                                    onClick = { testFileDownload() },
                                    modifier = Modifier.fillMaxWidth()
                                ) {
                                    Icon(Icons.Default.Download, contentDescription = null)
                                    Spacer(modifier = Modifier.width(8.dp))
                                    Text("Îã§Ïö¥Î°úÎìú ÌÖåÏä§Ìä∏")
                                }
                                
                                downloadResult?.let { result ->
                                    Card(
                                        colors = CardDefaults.cardColors(
                                            containerColor = if (result.success) 
                                                MaterialTheme.colorScheme.primaryContainer 
                                            else 
                                                MaterialTheme.colorScheme.errorContainer
                                        )
                                    ) {
                                        Column(
                                            modifier = Modifier.padding(12.dp)
                                        ) {
                                            Text(
                                                text = if (result.success) "‚úÖ ÏÑ±Í≥µ" else "‚ùå Ïã§Ìå®",
                                                fontWeight = FontWeight.Bold,
                                                color = if (result.success) 
                                                    MaterialTheme.colorScheme.onPrimaryContainer 
                                                else 
                                                    MaterialTheme.colorScheme.onErrorContainer
                                            )
                                            Text(
                                                text = result.message,
                                                modifier = Modifier.padding(top = 4.dp),
                                                color = if (result.success) 
                                                    MaterialTheme.colorScheme.onPrimaryContainer 
                                                else 
                                                    MaterialTheme.colorScheme.onErrorContainer
                                            )
                                            if (result.data.isNotEmpty()) {
                                                Text(
                                                    text = "Îç∞Ïù¥ÌÑ∞ Í∏∏Ïù¥: ${result.data.length} Î¨∏Ïûê",
                                                    style = MaterialTheme.typography.bodySmall,
                                                    modifier = Modifier.padding(top = 4.dp),
                                                    color = if (result.success) 
                                                        MaterialTheme.colorScheme.onPrimaryContainer 
                                                    else 
                                                        MaterialTheme.colorScheme.onErrorContainer
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            // XML ÌååÏã± ÌÖåÏä§Ìä∏ ÏÑπÏÖò
            item {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "üîç XML ÌååÏã± ÌÖåÏä§Ìä∏",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold
                            )
                            IconButton(onClick = { showXmlTest = !showXmlTest }) {
                                Icon(
                                    if (showXmlTest) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                                    contentDescription = "ÌéºÏπòÍ∏∞/Ï†ëÍ∏∞"
                                )
                            }
                        }
                        
                        AnimatedVisibility(
                            visible = showXmlTest,
                            enter = expandVertically(),
                            exit = shrinkVertically()
                        ) {
                            Column(
                                modifier = Modifier.padding(top = 16.dp),
                                verticalArrangement = Arrangement.spacedBy(12.dp)
                            ) {
                                Text(
                                    text = "‚Ä¢ DocumentBuilderFactory: XML ÌååÏÑú ÏÉùÏÑ±\n" +
                                            "‚Ä¢ DocumentBuilder: XML Î¨∏ÏÑú ÌååÏã±\n" +
                                            "‚Ä¢ DOM Ìä∏Î¶¨ Íµ¨Ï°∞Î°ú XML Îç∞Ïù¥ÌÑ∞ Ï†ëÍ∑º",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                
                                OutlinedTextField(
                                    value = xmlTestData,
                                    onValueChange = { xmlTestData = it },
                                    label = { Text("XML Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•") },
                                    placeholder = { Text("<users><user><name>ÌôçÍ∏∏Îèô</name></user></users>") },
                                    modifier = Modifier.fillMaxWidth(),
                                    minLines = 3
                                )
                                
                                Button(
                                    onClick = { testXmlParsing() },
                                    modifier = Modifier.fillMaxWidth()
                                ) {
                                    Icon(Icons.Default.Search, contentDescription = null)
                                    Spacer(modifier = Modifier.width(8.dp))
                                    Text("XML ÌååÏã± ÌÖåÏä§Ìä∏")
                                }
                                
                                xmlParseResult?.let { result ->
                                    Card(
                                        colors = CardDefaults.cardColors(
                                            containerColor = if (result.success) 
                                                MaterialTheme.colorScheme.primaryContainer 
                                            else 
                                                MaterialTheme.colorScheme.errorContainer
                                        )
                                    ) {
                                        Column(
                                            modifier = Modifier.padding(12.dp)
                                        ) {
                                            Text(
                                                text = if (result.success) "‚úÖ ÌååÏã± ÏÑ±Í≥µ" else "‚ùå ÌååÏã± Ïã§Ìå®",
                                                fontWeight = FontWeight.Bold,
                                                color = if (result.success) 
                                                    MaterialTheme.colorScheme.onPrimaryContainer 
                                                else 
                                                    MaterialTheme.colorScheme.onErrorContainer
                                            )
                                            Text(
                                                text = result.message,
                                                modifier = Modifier.padding(top = 4.dp),
                                                color = if (result.success) 
                                                    MaterialTheme.colorScheme.onPrimaryContainer 
                                                else 
                                                    MaterialTheme.colorScheme.onErrorContainer
                                            )
                                            if (result.parsedData.isNotEmpty()) {
                                                Text(
                                                    text = "ÌååÏã± Í≤∞Í≥º:",
                                                    fontWeight = FontWeight.Medium,
                                                    modifier = Modifier.padding(top = 8.dp),
                                                    color = if (result.success) 
                                                        MaterialTheme.colorScheme.onPrimaryContainer 
                                                    else 
                                                        MaterialTheme.colorScheme.onErrorContainer
                                                )
                                                Text(
                                                    text = result.parsedData,
                                                    style = MaterialTheme.typography.bodySmall,
                                                    modifier = Modifier.padding(top = 4.dp),
                                                    fontFamily = androidx.compose.ui.text.font.FontFamily.Monospace,
                                                    color = if (result.success) 
                                                        MaterialTheme.colorScheme.onPrimaryContainer 
                                                    else 
                                                        MaterialTheme.colorScheme.onErrorContainer
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
