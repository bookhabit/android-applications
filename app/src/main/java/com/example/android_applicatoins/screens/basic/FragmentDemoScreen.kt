package com.example.android_applicatoins.screens.basic

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.foundation.clickable
import androidx.compose.foundation.background
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextAlign

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FragmentDemoScreen(
    onBackPressed: () -> Unit
) {
    var currentFragment by remember { mutableStateOf("home") }
    var fragmentHistory by remember { mutableStateOf(listOf("home")) }
    
    // Fragment Îç∞Ïù¥ÌÑ∞
    data class FragmentInfo(
        val id: String,
        val title: String,
        val description: String,
        val icon: String,
        val content: String
    )
    
    val fragments = mapOf(
        "home" to FragmentInfo("home", "Ìôà", "Î©îÏù∏ ÌôîÎ©¥", "üè†", "ÏïàÎÖïÌïòÏÑ∏Ïöî! Fragment Îç∞Î™®Ïóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§.\n\nÏù¥ ÌôîÎ©¥ÏùÄ FragmentÏùò Í∞úÎÖêÏùÑ Î≥¥Ïó¨Ï§çÎãàÎã§:\n‚Ä¢ ÎèÖÎ¶ΩÏ†ÅÏù∏ UI Îã®ÏúÑ\n‚Ä¢ Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïª¥Ìè¨ÎÑåÌä∏\n‚Ä¢ ÎèÖÎ¶ΩÏ†ÅÏù∏ ÏÉùÎ™ÖÏ£ºÍ∏∞\n‚Ä¢ ActivityÏôÄ Î∂ÑÎ¶¨Îêú Î°úÏßÅ"),
        
        "profile" to FragmentInfo("profile", "ÌîÑÎ°úÌïÑ", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥", "üë§", "ÌîÑÎ°úÌïÑ FragmentÏûÖÎãàÎã§.\n\nÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:\n‚Ä¢ Ïù¥Î¶Ñ: ÍπÄÏ≤†Ïàò\n‚Ä¢ ÎÇòÏù¥: 25ÏÑ∏\n‚Ä¢ ÏßÅÏóÖ: Í∞úÎ∞úÏûê\n‚Ä¢ ÏúÑÏπò: ÏÑúÏö∏\n\nÏù¥ FragmentÎäî Îã§Î•∏ ÌôîÎ©¥ÏóêÏÑúÎèÑ Ïû¨ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§."),
        
        "settings" to FragmentInfo("settings", "ÏÑ§Ï†ï", "Ïï± ÏÑ§Ï†ï", "‚öôÔ∏è", "ÏÑ§Ï†ï FragmentÏûÖÎãàÎã§.\n\nÏï± ÏÑ§Ï†ï ÏòµÏÖò:\n‚Ä¢ ÏïåÎ¶º ÏÑ§Ï†ï\n‚Ä¢ ÌÖåÎßà Î≥ÄÍ≤Ω\n‚Ä¢ Ïñ∏Ïñ¥ ÏÑ§Ï†ï\n‚Ä¢ Í∞úÏù∏Ï†ïÎ≥¥ Í¥ÄÎ¶¨\n‚Ä¢ Í≥ÑÏ†ï ÏÑ§Ï†ï\n\nÍ∞Å ÏÑ§Ï†ïÏùÄ ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨Îê©ÎãàÎã§."),
        
        "notifications" to FragmentInfo("notifications", "ÏïåÎ¶º", "ÏïåÎ¶º Î™©Î°ù", "üîî", "ÏïåÎ¶º FragmentÏûÖÎãàÎã§.\n\nÏÉàÎ°úÏö¥ ÏïåÎ¶º:\n‚Ä¢ Î©îÏãúÏßÄ 3Í∞ú\n‚Ä¢ ÏóÖÎç∞Ïù¥Ìä∏ 1Í∞ú\n‚Ä¢ ÏπúÍµ¨ ÏöîÏ≤≠ 2Í∞ú\n\nÏïåÎ¶ºÏùÑ ÌÉ≠ÌïòÏó¨ ÏÉÅÏÑ∏ ÎÇ¥Ïö©ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî."),
        
        "favorites" to FragmentInfo("favorites", "Ï¶êÍ≤®Ï∞æÍ∏∞", "Ï¶êÍ≤®Ï∞æÍ∏∞ Î™©Î°ù", "‚≠ê", "Ï¶êÍ≤®Ï∞æÍ∏∞ FragmentÏûÖÎãàÎã§.\n\nÏ¶êÍ≤®Ï∞æÍ∏∞Îêú Ìï≠Î™©Îì§:\n‚Ä¢ Ï§ëÏöîÌïú Î©îÎ™®\n‚Ä¢ ÏûêÏ£º ÏÇ¨Ïö©ÌïòÎäî Í∏∞Îä•\n‚Ä¢ Ï¶êÍ≤®Ï∞æÍ∏∞Ìïú ÎßÅÌÅ¨\n‚Ä¢ Ï†ÄÏû•Îêú Ïù¥ÎØ∏ÏßÄ\n\nÏ¶êÍ≤®Ï∞æÍ∏∞Î•º Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî."),
        
        "help" to FragmentInfo("help", "ÎèÑÏõÄÎßê", "ÏÇ¨Ïö©Î≤ï ÏïàÎÇ¥", "‚ùì", "ÎèÑÏõÄÎßê FragmentÏûÖÎãàÎã§.\n\nFragment ÏÇ¨Ïö©Î≤ï:\n1. FragmentÎäî ÎèÖÎ¶ΩÏ†ÅÏù∏ UI Îã®ÏúÑÏûÖÎãàÎã§\n2. Ïó¨Îü¨ ActivityÏóêÏÑú Ïû¨ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§\n3. ÎèÖÎ¶ΩÏ†ÅÏù∏ ÏÉùÎ™ÖÏ£ºÍ∏∞Î•º Í∞ÄÏßëÎãàÎã§\n4. FragmentManagerÎ°ú Í¥ÄÎ¶¨Îê©ÎãàÎã§\n\nÎçî ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©ÏùÄ Í≥µÏãù Î¨∏ÏÑúÎ•º Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.")
    )
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Fragment Îç∞Î™®") },
                navigationIcon = {
                    IconButton(onClick = onBackPressed) {
                        Icon(Icons.Default.ArrowBack, "Îí§Î°úÍ∞ÄÍ∏∞")
                    }
                },
                actions = {
                    // Fragment ÌûàÏä§ÌÜ†Î¶¨ ÌëúÏãú
                    if (fragmentHistory.size > 1) {
                        IconButton(
                            onClick = {
                                if (fragmentHistory.size > 1) {
                                    fragmentHistory = fragmentHistory.dropLast(1)
                                    currentFragment = fragmentHistory.last()
                                }
                            }
                        ) {
                            Icon(Icons.Default.Undo, "Îí§Î°úÍ∞ÄÍ∏∞")
                        }
                    }
                }
            )
        }
    ) { innerPadding ->
        Row(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            // 1. Fragment ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò (FragmentManagerÏôÄ Ïú†ÏÇ¨)
            Card(
                modifier = Modifier
                    .width(200.dp)
                    .fillMaxHeight(),
                elevation = CardDefaults.cardElevation(4.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "Fragment Î™©Î°ù",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(bottom = 16.dp)
                    )
                    
                    fragments.values.forEach { fragment ->
                        Card(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp)
                                .clickable {
                                    currentFragment = fragment.id
                                    fragmentHistory = fragmentHistory + fragment.id
                                },
                            elevation = CardDefaults.cardElevation(
                                if (currentFragment == fragment.id) 4.dp else 1.dp
                            ),
                            colors = CardDefaults.cardColors(
                                containerColor = if (currentFragment == fragment.id) 
                                    MaterialTheme.colorScheme.primaryContainer 
                                else MaterialTheme.colorScheme.surface
                            )
                        ) {
                            Row(
                                modifier = Modifier.padding(12.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(
                                    text = fragment.icon,
                                    style = MaterialTheme.typography.titleMedium
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(
                                    text = fragment.title,
                                    style = MaterialTheme.typography.bodyMedium,
                                    fontWeight = if (currentFragment == fragment.id) 
                                        FontWeight.Bold else FontWeight.Normal
                                )
                            }
                        }
                    }
                }
            }
            
            // 2. Fragment Ïª®ÌÖåÏù¥ÎÑà (FragmentTransactionÍ≥º Ïú†ÏÇ¨)
            Card(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxHeight()
                    .padding(start = 16.dp),
                elevation = CardDefaults.cardElevation(4.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    // Fragment Ìó§Îçî
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = fragments[currentFragment]?.icon ?: "",
                                style = MaterialTheme.typography.headlineMedium
                            )
                            Spacer(modifier = Modifier.width(12.dp))
                            Text(
                                text = fragments[currentFragment]?.title ?: "",
                                style = MaterialTheme.typography.headlineMedium,
                                fontWeight = FontWeight.Bold
                            )
                        }
                        
                        // Fragment ÏÉùÎ™ÖÏ£ºÍ∏∞ ÏÉÅÌÉú ÌëúÏãú
                        Card(
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.secondaryContainer
                            )
                        ) {
                            Text(
                                text = "ÌôúÏÑ±",
                                style = MaterialTheme.typography.labelSmall,
                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)
                            )
                        }
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    // Fragment ÎÇ¥Ïö© (onCreateViewÏôÄ Ïú†ÏÇ¨)
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        elevation = CardDefaults.cardElevation(2.dp)
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Text(
                                text = "Fragment ÎÇ¥Ïö©",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold,
                                modifier = Modifier.padding(bottom = 12.dp)
                            )
                            
                            Text(
                                text = fragments[currentFragment]?.content ?: "",
                                style = MaterialTheme.typography.bodyMedium,
                                lineHeight = 20.sp
                            )
                        }
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    // Fragment Ï†ïÎ≥¥ (FragmentManager Ï†ïÎ≥¥ÏôÄ Ïú†ÏÇ¨)
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant
                        )
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Text(
                                text = "Fragment Ï†ïÎ≥¥",
                                style = MaterialTheme.typography.titleSmall,
                                fontWeight = FontWeight.Bold,
                                modifier = Modifier.padding(bottom = 8.dp)
                            )
                            
                            val currentFragmentInfo = fragments[currentFragment]
                            if (currentFragmentInfo != null) {
                                Text("ID: ${currentFragmentInfo.id}")
                                Text("Ï†úÎ™©: ${currentFragmentInfo.title}")
                                Text("ÏÑ§Î™Ö: ${currentFragmentInfo.description}")
                                Text("ÌòÑÏû¨ ÏãúÍ∞Ñ: ${System.currentTimeMillis()}")
                            }
                        }
                    }
                }
            }
        }
        
        // Fragment Ï†ÑÌôò Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÎÆ¨Î†àÏù¥ÏÖò
        LaunchedEffect(currentFragment) {
            // Fragment Ï†ÑÌôò Ïãú Ïû†Ïãú Î°úÎî© Ìö®Í≥º
            kotlinx.coroutines.delay(100)
        }
    }
}
